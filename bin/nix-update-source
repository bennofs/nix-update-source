#!/usr/bin/env python3
from __future__ import print_function

import os, sys
import json, subprocess
import optparse

alg = 'sha256'

HANDLERS = {}
def handler(type):
  def wrap(fn):
    HANDLERS[type] = fn
    return fn
  return wrap

def hash_slice(hsh, keys):
  return { key: value for (key, value) in hsh.items() if key in keys }

def hash_without(hsh, keys):
  return { key: value for (key, value) in hsh.items() if key not in keys }

def hash_merge(a, b):
  copy = a.copy()
  copy.update(b)
  return copy

class Fetcher(object):
  def __init__(self, fnname, args):
    self.json = { 'fn': fnname, 'args': args }

@handler('fetchFromGitHub')
def handle_github(inputs):
  hash = subprocess.check_output([
    'nix-prefetch-zip',
    '--hash-type', alg,
    'https://github.com/{owner}/{repo}/archive/{rev}.tar.gz'.format(**inputs),
  ]).decode('ascii').strip()
  params = hash_slice(inputs, ['rev', 'owner', 'repo'])
  return Fetcher('fetchFromGitHub', hash_merge(params, { alg: hash }))

@handler('fetchgit')
def handle_git(inputs):
  url = inputs['url']
  revision = inputs.get('rev', 'HEAD')

  args = []
  if inputs.get('submodules', False):
    args.append('--fetch-submodules')

  json_str = subprocess.check_output(
    ['nix-prefetch-git'] + args + [url, revision]
  ).decode('utf-8')
  # fetchgit builder already returns JSON
  params = json.loads(json_str)
  return Fetcher('fetchgit', hash_without(params, ['date']))

def main():
  p = optparse.OptionParser('Usage: %prog [OPTIONS] intputfile')
  p.add_option('-s', '--set', nargs=2, action='append', default=[])
  p.add_option('--prompt', action='append', default=[])
  p.add_option('-o', '--output', help='defaults to updating input')

  input_data = {}
  input_file = None

  opts, args = p.parse_args()
  assert len(args) <= 1, "Too many arguments"

  if len(args) > 0:
    input_file = args[0]
    if not opts.output:
      opts.output = input_file

    print('Loading %s' % input_file, file=sys.stderr)
    with open(input_file) as f:
      input_data = json.load(f)

  assert opts.output, "Output path required"

  derived_data = {}

  for key, val in opts.set:
    derived_data[key] = val

  for key in opts.prompt:
    derived_data[key] = input('Enter value for %r: ' % (key,)).strip('\n')

  # interpret {placeholders} (note: not recursive or even ordered; won't work for dependent interpolations)
  for k, v in input_data.items():
    if '{' in v:
      derived_data[k] = v.format(**input_data)

  combined_inputs = hash_merge(input_data, derived_data)
  print('input data: %r' % (combined_inputs), file=sys.stderr)

  fetch_type = combined_inputs['type']
  try:
    handler = HANDLERS[fetch_type]
  except KeyError:
    raise RuntimeError("Unsupported type: {type}".format(**combined_inputs))

  fetcher = handler(combined_inputs)

  output_json = hash_merge(input_data, { 'fetch': hash_merge(derived_data, fetcher.json) })
  print('Writing %s' % opts.output, file=sys.stderr)

  tempfile = opts.output + '.tmp'
  with open(tempfile, 'w') as dest:
    json.dump(output_json, dest, sort_keys=True, indent=2, separators=(',', ': '))
  os.rename(tempfile, opts.output)

main()
